{"ast":null,"code":"var _jsxFileName = \"/Users/katetuohy/Documents/color-palette/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport './App.css';\nimport * as React from 'react';\nimport Palette from './Palette.js';\nimport { Button, TextField } from '@mui/material';\nimport tracery from 'tracery-grammar';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport colorsJson from './tracery/colors.json';\nimport { shades } from './ntc.js'; // import ntc from './ntc.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [colors, setColors] = React.useState(['#D57B4F', '#C1D54F', '#4FD554', '#4FD0D5', '#4F65D5', '#D54F8C']);\n  const [colorsTracery, setColorsTracery] = React.useState(tracery.createGrammar(colorsJson));\n  colorsTracery.addModifiers(tracery.baseEngModifiers);\n  const [num, setNum] = React.useState(5);\n  const [paletteName, setPaletteName] = React.useState(\"Sunny Day on the beach\");\n\n  const ntc = require('./ntc.js');\n\n  const changeColors = () => {\n    let c = [];\n\n    for (let ii = 0; ii < num; ii++) {\n      c.push('#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0'));\n    }\n\n    setColors(c);\n  };\n\n  React.useEffect(() => {\n    shades = [];\n\n    for (var ii = 0; ii < num; ii++) {\n      shades.push(ntc.name(colors[ii])[3]);\n    } // Get sub-array of first n elements after shuffled\n\n\n    var modeMap = {};\n    var maxEl = shades[0],\n        maxCount = 1;\n\n    for (var i = 0; i < shades.length; i++) {\n      var el = shades[i];\n      if (modeMap[el] == null) modeMap[el] = 1;else modeMap[el]++;\n\n      if (modeMap[el] > maxCount) {\n        maxEl = el;\n        maxCount = modeMap[el];\n      }\n    }\n\n    const shortened = shades.filter(function (value) {\n      console.log(\"Value::\" + value);\n      return value != maxEl;\n    });\n    console.log(shortened);\n    const shuffled = shortened.sort(() => 0.5 - Math.random());\n    console.log(\"shuffled::: \" + shuffled);\n    let selected = maxEl;\n\n    if (shuffled.length > 0) {\n      selected = shuffled[0];\n    }\n\n    console.log(\"max element::\" + maxEl);\n    console.log(selected);\n\n    switch (maxEl) {\n      case 'Red':\n        switch (selected) {\n          case 'Orange':\n            var redOrange = colorsTracery.flatten('#redAdj.capitalize# #orangeNoun#');\n            var orangeRed = colorsTracery.flatten('#orangeAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redOrange : orangeRed);\n            break;\n\n          case 'Yellow':\n            var redYellow = colorsTracery.flatten('#redAdj.capitalize# #yellowNoun#');\n            var yellowRed = colorsTracery.flatten('#yellowAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redYellow : yellowRed);\n            break;\n\n          case 'Green':\n            var redGreen = colorsTracery.flatten('#redAdj.capitalize# #greenNoun#');\n            var greenRed = colorsTracery.flatten('#greenAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redGreen : greenRed);\n            break;\n\n          case 'Blue':\n            var redBlue = colorsTracery.flatten('#redAdj.capitalize# #blueNoun#');\n            var blueRed = colorsTracery.flatten('#blueAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBlue : blueRed);\n            break;\n\n          case 'Violet':\n            var redViolet = colorsTracery.flatten('#redAdj.capitalize# #violetNoun#');\n            var violetRed = colorsTracery.flatten('#violetAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redViolet : violetRed);\n            break;\n\n          case 'Brown':\n            var redBrown = colorsTracery.flatten('#redAdj.capitalize# #brownNoun#');\n            var brownRed = colorsTracery.flatten('#brownAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBrown : brownRed);\n            break;\n\n          case 'Black':\n            var redBlack = colorsTracery.flatten('#redAdj.capitalize# #blackNoun#');\n            var blackRed = colorsTracery.flatten('#blackAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBlack : blackRed);\n            break;\n\n          case 'Grey':\n            var redGrey = colorsTracery.flatten('#redAdj.capitalize# #greyNoun#');\n            var greyRed = colorsTracery.flatten('#greyAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redGrey : greyRed);\n            break;\n\n          case 'White':\n            var redwhite = colorsTracery.flatten('#redAdj.capitalize# #whiteNoun#');\n            var whiteRed = colorsTracery.flatten('#whiteAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redwhite : whiteRed);\n            break;\n        }\n\n        break;\n\n      case 'Orange':\n        switch (selected) {\n          case 'Orange':\n            var redOrange = colorsTracery.flatten('#redAdj.capitalize# #orangeNoun#');\n            var orangeRed = colorsTracery.flatten('#orangeAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redOrange : orangeRed);\n            break;\n\n          case 'Yellow':\n            var orangeYellow = colorsTracery.flatten('#orangeAdj.capitalize# #yellowNoun#');\n            var yellowOrange = colorsTracery.flatten('#yellowAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeYellow : yellowOrange);\n            break;\n\n          case 'Green':\n            var orangeGreen = colorsTracery.flatten('#orangeAdj.capitalize# #greenNoun#');\n            var greenorange = colorsTracery.flatten('#greenAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeGreen : greenorange);\n            break;\n\n          case 'Blue':\n            var orangeBlue = colorsTracery.flatten('#orangeAdj.capitalize# #blueNoun#');\n            var blueOrange = colorsTracery.flatten('#blueAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBlue : blueOrange);\n            break;\n\n          case 'Violet':\n            var orangeViolet = colorsTracery.flatten('#orangeAdj.capitalize# #violetNoun#');\n            var violetOrange = colorsTracery.flatten('#violetAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeViolet : violetOrange);\n            break;\n\n          case 'Brown':\n            var orangeBrown = colorsTracery.flatten('#orangeAdj.capitalize# #brownNoun#');\n            var brownOrange = colorsTracery.flatten('#brownAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBrown : brownOrange);\n            break;\n\n          case 'Black':\n            var orangeBlack = colorsTracery.flatten('#orangeAdj.capitalize# #blackNoun#');\n            var blackOrange = colorsTracery.flatten('#blackAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBlack : blackOrange);\n            break;\n\n          case 'Grey':\n            var orangeGrey = colorsTracery.flatten('#orangeAdj.capitalize# #greyNoun#');\n            var greyOrange = colorsTracery.flatten('#greyAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeGrey : greyOrange);\n            break;\n\n          case 'White':\n            var orangewhite = colorsTracery.flatten('#orangeAdj.capitalize# #whiteNoun#');\n            var whiteOrange = colorsTracery.flatten('#whiteAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangewhite : whiteOrange);\n            break;\n        }\n\n        break;\n\n      case 'Yellow':\n        switch (selected) {\n          case 'Red':\n            var yellowRed = colorsTracery.flatten('#yellowAdj.capitalize# #redNoun#');\n            var redYellow = colorsTracery.flatten('#redAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowRed : redYellow);\n            break;\n\n          case 'Orange':\n            var yellowOrange = colorsTracery.flatten('#yellowAdj.capitalize# #orangeNoun#');\n            var orangeYellow = colorsTracery.flatten('#orangeAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowOrange : orangeYellow);\n            break;\n\n          case 'Green':\n            var yellowGreen = colorsTracery.flatten('#yellowAdj.capitalize# #greenNoun#');\n            var greenyellow = colorsTracery.flatten('#greenAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGreen : greenyellow);\n            break;\n\n          case 'Blue':\n            var yellowBlue = colorsTracery.flatten('#yellowAdj.capitalize# #blueNoun#');\n            var blueyellow = colorsTracery.flatten('#blueAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlue : blueyellow);\n            break;\n\n          case 'Violet':\n            var yellowViolet = colorsTracery.flatten('#yellowAdj.capitalize# #violetNoun#');\n            var violetyellow = colorsTracery.flatten('#violetAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowViolet : violetyellow);\n            break;\n\n          case 'Brown':\n            var yellowBrown = colorsTracery.flatten('#yellowAdj.capitalize# #brownNoun#');\n            var brownyellow = colorsTracery.flatten('#brownAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBrown : brownyellow);\n            break;\n\n          case 'Black':\n            var yellowBlack = colorsTracery.flatten('#yellowAdj.capitalize# #blackNoun#');\n            var blackyellow = colorsTracery.flatten('#blackAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlack : blackyellow);\n            break;\n\n          case 'Grey':\n            var yellowGrey = colorsTracery.flatten('#yellowAdj.capitalize# #greyNoun#');\n            var greyyellow = colorsTracery.flatten('#greyAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGrey : greyyellow);\n            break;\n\n          case 'White':\n            var yellowwhite = colorsTracery.flatten('#yellowAdj.capitalize# #whiteNoun#');\n            var whiteyellow = colorsTracery.flatten('#whiteAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowwhite : whiteyellow);\n            break;\n        }\n\n        break;\n\n      case 'Green':\n        switch (selected) {\n          case 'Red':\n            var greenRed = colorsTracery.flatten('#greenAdj.capitalize# #redNoun#');\n            var redgreen = colorsTracery.flatten('#redAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenRed : redgreen);\n            break;\n\n          case 'Orange':\n            var greenOrange = colorsTracery.flatten('#greenAdj.capitalize# #orangeNoun#');\n            var orangegreen = colorsTracery.flatten('#orangeAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenOrange : orangeGreen);\n            break;\n\n          case 'Yellow':\n            var greenYellow = colorsTracery.flatten('#greenAdj.capitalize# #yellowNoun#');\n            var yellowGreen = colorsTracery.flatten('#yellowAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGreen : greenYellow);\n            break;\n\n          case 'Blue':\n            var greenBlue = colorsTracery.flatten('#greenAdj.capitalize# #blueNoun#');\n            var blueGreen = colorsTracery.flatten('#blueAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlue : blueGreen);\n            break;\n\n          case 'Violet':\n            var greenViolet = colorsTracery.flatten('#greenAdj.capitalize# #violetNoun#');\n            var violetGreen = colorsTracery.flatten('#violetAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenViolet : violetGreen);\n            break;\n\n          case 'Brown':\n            var greenBrown = colorsTracery.flatten('#greenAdj.capitalize# #brownNoun#');\n            var brownGreen = colorsTracery.flatten('#brownAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBrown : brownGreen);\n            break;\n\n          case 'Black':\n            var greenBlack = colorsTracery.flatten('#greenAdj.capitalize# #blackNoun#');\n            var blackGreen = colorsTracery.flatten('#blackAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlack : blackGreen);\n            break;\n\n          case 'Grey':\n            var greenGrey = colorsTracery.flatten('#greenAdj.capitalize# #greyNoun#');\n            var greyGreen = colorsTracery.flatten('#greyAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenGrey : greyGreen);\n            break;\n\n          case 'White':\n            var greenWhite = colorsTracery.flatten('#greenAdj.capitalize# #whiteNoun#');\n            var whiteGreen = colorsTracery.flatten('#whiteAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenWhite : whiteGreen);\n            break;\n        }\n\n        break;\n\n      case 'Blue':\n        switch (selected) {\n          case 'Red':\n            var blueRed = colorsTracery.flatten('#blueAdj.capitalize# #redNoun#');\n            var redBlue = colorsTracery.flatten('#redAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueRed : redBlue);\n            break;\n\n          case 'Orange':\n            var blueOrange = colorsTracery.flatten('#blueAdj.capitalize# #orangeNoun#');\n            var orangeBlue = colorsTracery.flatten('#orangeAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueOrange : orangeBlue);\n            break;\n\n          case 'Yellow':\n            var blueYellow = colorsTracery.flatten('#blueAdj.capitalize# #yellowNoun#');\n            var yellowBlue = colorsTracery.flatten('#yellowAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlue : blueYellow);\n            break;\n\n          case 'Green':\n            var blueGreen = colorsTracery.flatten('#blueAdj.capitalize# #greenNoun#');\n            var greenBlue = colorsTracery.flatten('#greenAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlue : blueGreen);\n            break;\n\n          case 'Violet':\n            var blueViolet = colorsTracery.flatten('#blueAdj.capitalize# #violetNoun#');\n            var violetBlue = colorsTracery.flatten('#violetAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueViolet : violetBlue);\n            break;\n\n          case 'Brown':\n            var blueBrown = colorsTracery.flatten('#blueAdj.capitalize# #brownNoun#');\n            var brownBlue = colorsTracery.flatten('#brownAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBrown : brownBlue);\n            break;\n\n          case 'Black':\n            var blueBlack = colorsTracery.flatten('#blueAdj.capitalize# #blackNoun#');\n            var blackBlue = colorsTracery.flatten('#blackAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBlack : blackBlue);\n            break;\n\n          case 'Grey':\n            var blueGrey = colorsTracery.flatten('#blueAdj.capitalize# #greyNoun#');\n            var greyBlue = colorsTracery.flatten('#greyAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueGrey : greyBlue);\n            break;\n\n          case 'White':\n            var blueWhite = colorsTracery.flatten('#blueAdj.capitalize# #whiteNoun#');\n            var whiteBlue = colorsTracery.flatten('#whiteAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueWhite : whiteBlue);\n            break;\n        }\n\n        break;\n\n      case 'Violet':\n        switch (selected) {\n          case 'Red':\n            var violetRed = colorsTracery.flatten('#violetAdj.capitalize# #redNoun#');\n            var redViolet = colorsTracery.flatten('#redAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetRed : redViolet);\n            break;\n\n          case 'Orange':\n            var violetOrange = colorsTracery.flatten('#violetAdj.capitalize# #orangeNoun#');\n            var orangeViolet = colorsTracery.flatten('#orangeAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetOrange : orangeViolet);\n            break;\n\n          case 'Yellow':\n            var violetYellow = colorsTracery.flatten('#violetAdj.capitalize# #yellowNoun#');\n            var yellowViolet = colorsTracery.flatten('#yellowAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowViolet : violetYellow);\n            break;\n\n          case 'Green':\n            var violetGreen = colorsTracery.flatten('#violetAdj.capitalize# #greenNoun#');\n            var greenViolet = colorsTracery.flatten('#greenAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenViolet : violetGreen);\n            break;\n\n          case 'Blue':\n            var violetBlue = colorsTracery.flatten('#violetAdj.capitalize# #blueNoun#');\n            var blueViolet = colorsTracery.flatten('#blueAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueViolet : violetBlue);\n            break;\n\n          case 'Brown':\n            var violetBrown = colorsTracery.flatten('#violetAdj.capitalize# #brownNoun#');\n            var brownViolet = colorsTracery.flatten('#brownAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBrown : brownViolet);\n            break;\n\n          case 'Black':\n            var violetBlack = colorsTracery.flatten('#violetAdj.capitalize# #blackNoun#');\n            var blackViolet = colorsTracery.flatten('#blackAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBlack : blackViolet);\n            break;\n\n          case 'Grey':\n            var violetGrey = colorsTracery.flatten('#violetAdj.capitalize# #greyNoun#');\n            var greyViolet = colorsTracery.flatten('#greyAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetGrey : greyViolet);\n            break;\n\n          case 'White':\n            var violetWhite = colorsTracery.flatten('#violetAdj.capitalize# #whiteNoun#');\n            var whiteViolet = colorsTracery.flatten('#whiteAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetWhite : whiteViolet);\n            break;\n        }\n\n        break;\n\n      case 'Brown':\n        switch (selected) {\n          case 'Red':\n            var brownRed = colorsTracery.flatten('#brownAdj.capitalize# #redNoun#');\n            var redbrown = colorsTracery.flatten('#redAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownRed : redbrown);\n            break;\n\n          case 'Orange':\n            var brownOrange = colorsTracery.flatten('#brownAdj.capitalize# #orangeNoun#');\n            var orangebrown = colorsTracery.flatten('#orangeAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownOrange : orangebrown);\n            break;\n\n          case 'Yellow':\n            var brownYellow = colorsTracery.flatten('#brownAdj.capitalize# #yellowNoun#');\n            var yellowbrown = colorsTracery.flatten('#yellowAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowbrown : brownYellow);\n            break;\n\n          case 'Green':\n            var brownGreen = colorsTracery.flatten('#brownAdj.capitalize# #greenNoun#');\n            var greenbrown = colorsTracery.flatten('#greenAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenbrown : brownGreen);\n            break;\n\n          case 'Blue':\n            var brownBlue = colorsTracery.flatten('#brownAdj.capitalize# #blueNoun#');\n            var bluebrown = colorsTracery.flatten('#blueAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? bluebrown : brownBlue);\n            break;\n\n          case 'Violet':\n            var violetBrown = colorsTracery.flatten('#violetAdj.capitalize# #brownNoun#');\n            var brownViolet = colorsTracery.flatten('#brownAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBrown : brownViolet);\n            break;\n\n          case 'Black':\n            var brownBlack = colorsTracery.flatten('#brownAdj.capitalize# #blackNoun#');\n            var blackbrown = colorsTracery.flatten('#blackAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownBlack : blackbrown);\n            break;\n\n          case 'Grey':\n            var brownGrey = colorsTracery.flatten('#brownAdj.capitalize# #greyNoun#');\n            var greybrown = colorsTracery.flatten('#greyAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownGrey : greybrown);\n            break;\n\n          case 'White':\n            var brownWhite = colorsTracery.flatten('#brownAdj.capitalize# #whiteNoun#');\n            var whitebrown = colorsTracery.flatten('#whiteAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownWhite : whitebrown);\n            break;\n        }\n\n        break;\n\n      case 'Black':\n        switch (selected) {\n          case 'Red':\n            var blackRed = colorsTracery.flatten('#blackAdj.capitalize# #redNoun#');\n            var redBlack = colorsTracery.flatten('#redAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackRed : redBlack);\n            break;\n\n          case 'Orange':\n            var blackOrange = colorsTracery.flatten('#blackAdj.capitalize# #orangeNoun#');\n            var orangeBlack = colorsTracery.flatten('#orangeAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackOrange : orangeBlack);\n            break;\n\n          case 'Yellow':\n            var blackYellow = colorsTracery.flatten('#blackAdj.capitalize# #yellowNoun#');\n            var yellowBlack = colorsTracery.flatten('#yellowAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlack : blackYellow);\n            break;\n\n          case 'Green':\n            var blackGreen = colorsTracery.flatten('#blackAdj.capitalize# #greenNoun#');\n            var greenBlack = colorsTracery.flatten('#greenAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlack : blackGreen);\n            break;\n\n          case 'Blue':\n            var blackBlue = colorsTracery.flatten('#blackAdj.capitalize# #blueNoun#');\n            var blueBlack = colorsTracery.flatten('#blueAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBlack : blackBlue);\n            break;\n\n          case 'Violet':\n            var violetBlack = colorsTracery.flatten('#violetAdj.capitalize# #blackNoun#');\n            var blackViolet = colorsTracery.flatten('#blackAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBlack : blackViolet);\n            break;\n\n          case 'Brown':\n            var brownBlack = colorsTracery.flatten('#brownAdj.capitalize# #blackNoun#');\n            var blackBrown = colorsTracery.flatten('#blackAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownBlack : blackBrown);\n            break;\n\n          case 'Grey':\n            var blackGrey = colorsTracery.flatten('#blackAdj.capitalize# #greyNoun#');\n            var greyBlack = colorsTracery.flatten('#greyAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackGrey : greyBlack);\n            break;\n\n          case 'White':\n            var blackWhite = colorsTracery.flatten('#blackAdj.capitalize# #whiteNoun#');\n            var whiteBlack = colorsTracery.flatten('#whiteAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackWhite : whiteBlack);\n            break;\n        }\n\n        break;\n\n      case 'Grey':\n        switch (selected) {\n          case 'Red':\n            var greyRed = colorsTracery.flatten('#greyAdj.capitalize# #redNoun#');\n            var redGrey = colorsTracery.flatten('#redAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyRed : redGrey);\n            break;\n\n          case 'Orange':\n            var greyOrange = colorsTracery.flatten('#greyAdj.capitalize# #orangeNoun#');\n            var orangeGrey = colorsTracery.flatten('#orangeAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyOrange : orangeGrey);\n            break;\n\n          case 'Yellow':\n            var greyYellow = colorsTracery.flatten('#greyAdj.capitalize# #yellowNoun#');\n            var yellowGrey = colorsTracery.flatten('#yellowAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGrey : greyYellow);\n            break;\n\n          case 'Green':\n            var greyGreen = colorsTracery.flatten('#greyAdj.capitalize# #greenNoun#');\n            var greenGrey = colorsTracery.flatten('#greenAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenGrey : greyGreen);\n            break;\n\n          case 'Blue':\n            var greyBlue = colorsTracery.flatten('#greyAdj.capitalize# #blueNoun#');\n            var blueGrey = colorsTracery.flatten('#blueAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueGrey : greyBlue);\n            break;\n\n          case 'Violet':\n            var violetGrey = colorsTracery.flatten('#violetAdj.capitalize# #greyNoun#');\n            var greyViolet = colorsTracery.flatten('#greyAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetGrey : greyViolet);\n            break;\n\n          case 'Brown':\n            var brownGrey = colorsTracery.flatten('#brownAdj.capitalize# #greyNoun#');\n            var greyBrown = colorsTracery.flatten('#greyAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownGrey : greyBrown);\n            break;\n\n          case 'Black':\n            var blackGrey = colorsTracery.flatten('#blackAdj.capitalize# #greyNoun#');\n            var greyBlack = colorsTracery.flatten('#greyAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackGrey : greyBlack);\n            break;\n\n          case 'White':\n            var greyWhite = colorsTracery.flatten('#greyAdj.capitalize# #whiteNoun#');\n            var whiteGrey = colorsTracery.flatten('#whiteAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyWhite : whiteGrey);\n            break;\n        }\n\n        break;\n\n      case 'White':\n        switch (selected) {\n          case 'Red':\n            var whiteRed = colorsTracery.flatten('#whiteAdj.capitalize# #redNoun#');\n            var redWhite = colorsTracery.flatten('#redAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? whiteRed : redWhite);\n            break;\n\n          case 'Orange':\n            var whiteOrange = colorsTracery.flatten('#whiteAdj.capitalize# #orangeNoun#');\n            var orangeWhite = colorsTracery.flatten('#orangeAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? whiteOrange : orangeWhite);\n            break;\n\n          case 'Yellow':\n            var whiteYellow = colorsTracery.flatten('#whiteAdj.capitalize# #yellowNoun#');\n            var yellowWhite = colorsTracery.flatten('#yellowAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowWhite : whiteYellow);\n            break;\n\n          case 'Green':\n            var whiteGreen = colorsTracery.flatten('#whiteAdj.capitalize# #greenNoun#');\n            var greenWhite = colorsTracery.flatten('#greenAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenWhite : whiteGreen);\n            break;\n\n          case 'Blue':\n            var whiteBlue = colorsTracery.flatten('#whiteAdj.capitalize# #blueNoun#');\n            var blueWhite = colorsTracery.flatten('#blueAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueWhite : whiteBlue);\n            break;\n\n          case 'Violet':\n            var violetWhite = colorsTracery.flatten('#violetAdj.capitalize# #whiteNoun#');\n            var whiteViolet = colorsTracery.flatten('#whiteAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetWhite : whiteViolet);\n            break;\n\n          case 'Brown':\n            var brownWhite = colorsTracery.flatten('#brownAdj.capitalize# #whiteNoun#');\n            var whiteBrown = colorsTracery.flatten('#whiteAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownWhite : whiteBrown);\n            break;\n\n          case 'Black':\n            var blackWhite = colorsTracery.flatten('#blackAdj.capitalize# #whiteNoun#');\n            var whiteBlack = colorsTracery.flatten('#whiteAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackWhite : whiteBlack);\n            break;\n\n          case 'Grey':\n            var greyWhite = colorsTracery.flatten('#greyAdj.capitalize# #whiteNoun#');\n            var whiteGrey = colorsTracery.flatten('#whiteAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyWhite : whiteGrey);\n            break;\n        }\n\n        break;\n    }\n  }, [colors]);\n\n  const changeNumOfColors = event => {\n    setNum(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 30,\n        backgroundColor: '#d6d6d6'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-header\",\n        children: \"Color Palette Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-number\",\n        label: \"Number of Colors\",\n        type: \"number\",\n        InputLabelProps: {\n          shrink: true\n        },\n        InputProps: {\n          inputProps: {\n            min: 2,\n            max: 8\n          }\n        },\n        defaultValue: num,\n        onChange: changeNumOfColors,\n        style: {\n          marginRight: 15,\n          minWidth: 125\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          paddingTop: 30\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"Generate-button\",\n          variant: \"contained\",\n          onClick: changeColors,\n          children: \"Generate New Color Palette\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Palette-name\",\n      children: paletteName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      className: \"Palette\",\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Footer\",\n      children: \"Created by Katherine Tuohy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 565,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Wqi+y0l+VgceYe/rWQrDWAbD6rQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/katetuohy/Documents/color-palette/src/App.js"],"names":["React","Palette","Button","TextField","tracery","GetColorName","colorsJson","shades","App","colors","setColors","useState","colorsTracery","setColorsTracery","createGrammar","addModifiers","baseEngModifiers","num","setNum","paletteName","setPaletteName","ntc","require","changeColors","c","ii","push","Math","random","toString","padStart","useEffect","name","modeMap","maxEl","maxCount","i","length","el","shortened","filter","value","console","log","shuffled","sort","selected","redOrange","flatten","orangeRed","Boolean","round","redYellow","yellowRed","redGreen","greenRed","redBlue","blueRed","redViolet","violetRed","redBrown","brownRed","redBlack","blackRed","redGrey","greyRed","redwhite","whiteRed","orangeYellow","yellowOrange","orangeGreen","greenorange","orangeBlue","blueOrange","orangeViolet","violetOrange","orangeBrown","brownOrange","orangeBlack","blackOrange","orangeGrey","greyOrange","orangewhite","whiteOrange","yellowGreen","greenyellow","yellowBlue","blueyellow","yellowViolet","violetyellow","yellowBrown","brownyellow","yellowBlack","blackyellow","yellowGrey","greyyellow","yellowwhite","whiteyellow","redgreen","greenOrange","orangegreen","greenYellow","greenBlue","blueGreen","greenViolet","violetGreen","greenBrown","brownGreen","greenBlack","blackGreen","greenGrey","greyGreen","greenWhite","whiteGreen","blueYellow","blueViolet","violetBlue","blueBrown","brownBlue","blueBlack","blackBlue","blueGrey","greyBlue","blueWhite","whiteBlue","violetYellow","violetBrown","brownViolet","violetBlack","blackViolet","violetGrey","greyViolet","violetWhite","whiteViolet","redbrown","orangebrown","brownYellow","yellowbrown","greenbrown","bluebrown","brownBlack","blackbrown","brownGrey","greybrown","brownWhite","whitebrown","blackYellow","blackBrown","blackGrey","greyBlack","blackWhite","whiteBlack","greyYellow","greyBrown","greyWhite","whiteGrey","redWhite","orangeWhite","whiteYellow","yellowWhite","whiteBrown","changeNumOfColors","event","target","padding","backgroundColor","shrink","inputProps","min","max","marginRight","minWidth","paddingTop"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport * as React from 'react';\nimport Palette from './Palette.js';\nimport { Button, TextField } from '@mui/material';\nimport tracery from 'tracery-grammar';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport colorsJson from './tracery/colors.json';\nimport { shades } from './ntc.js';\n// import ntc from './ntc.js';\n\nfunction App() {\n\n  const [colors, setColors] = React.useState(['#D57B4F','#C1D54F','#4FD554','#4FD0D5','#4F65D5', '#D54F8C']);\n  const [colorsTracery, setColorsTracery] = React.useState(tracery.createGrammar(colorsJson));\n  colorsTracery.addModifiers(tracery.baseEngModifiers); \n  const [num, setNum] = React.useState(5);\n  const [paletteName, setPaletteName] = React.useState(\"Sunny Day on the beach\");\n  const ntc = require('./ntc.js');\n\n  const changeColors = () => {\n    let c = [];\n    for (let ii = 0; ii < num; ii++) {\n      c.push('#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0'));\n    }\n    setColors(c);\n  }\n\n  React.useEffect(() => {\n    shades = []\n    for (var ii = 0; ii < num; ii++) {\n      shades.push(ntc.name(colors[ii])[3])\n    }\n    // Get sub-array of first n elements after shuffled\n\n    var modeMap = {};\n    var maxEl = shades[0], maxCount = 1;\n    for(var i = 0; i < shades.length; i++) {\n        var el = shades[i];\n        if(modeMap[el] == null)\n            modeMap[el] = 1;\n        else\n            modeMap[el]++;  \n        if (modeMap[el] > maxCount) {\n            maxEl = el;\n            maxCount = modeMap[el];\n        }\n    }\n\n    const shortened = shades.filter(function(value){ \n      console.log(\"Value::\" + value)\n      return value != maxEl;\n    });\n    console.log(shortened)\n\n    const shuffled = shortened.sort(() => 0.5 - Math.random());\n    console.log(\"shuffled::: \" + shuffled);\n\n    let selected = maxEl;\n    if (shuffled.length > 0) {\n       selected = shuffled[0];\n    } \n    \n    console.log(\"max element::\" + maxEl);\n    console.log(selected);\n    switch(maxEl) {\n      case 'Red':\n        switch (selected) {\n          case 'Orange':\n            var redOrange = colorsTracery.flatten('#redAdj.capitalize# #orangeNoun#');\n            var orangeRed = colorsTracery.flatten('#orangeAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redOrange : orangeRed);\n            break;\n          case 'Yellow':\n            var redYellow = colorsTracery.flatten('#redAdj.capitalize# #yellowNoun#');\n            var yellowRed = colorsTracery.flatten('#yellowAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redYellow : yellowRed);\n            break;\n          case 'Green':\n            var redGreen = colorsTracery.flatten('#redAdj.capitalize# #greenNoun#');\n            var greenRed = colorsTracery.flatten('#greenAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redGreen : greenRed);\n            break;\n          case 'Blue':\n            var redBlue = colorsTracery.flatten('#redAdj.capitalize# #blueNoun#');\n            var blueRed = colorsTracery.flatten('#blueAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBlue : blueRed);\n            break;\n          case 'Violet':\n            var redViolet = colorsTracery.flatten('#redAdj.capitalize# #violetNoun#');\n            var violetRed = colorsTracery.flatten('#violetAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redViolet : violetRed);\n            break;\n          case 'Brown':\n            var redBrown = colorsTracery.flatten('#redAdj.capitalize# #brownNoun#');\n            var brownRed = colorsTracery.flatten('#brownAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBrown : brownRed);\n            break;\n          case 'Black':\n            var redBlack = colorsTracery.flatten('#redAdj.capitalize# #blackNoun#');\n            var blackRed = colorsTracery.flatten('#blackAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redBlack : blackRed);\n            break;\n          case 'Grey':\n            var redGrey = colorsTracery.flatten('#redAdj.capitalize# #greyNoun#');\n            var greyRed = colorsTracery.flatten('#greyAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redGrey : greyRed);\n            break;\n          case 'White':\n            var redwhite = colorsTracery.flatten('#redAdj.capitalize# #whiteNoun#');\n            var whiteRed = colorsTracery.flatten('#whiteAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redwhite : whiteRed);\n            break; \n        }\n        break;\n      case 'Orange':\n        switch (selected) {\n          case 'Orange':\n            var redOrange = colorsTracery.flatten('#redAdj.capitalize# #orangeNoun#');\n            var orangeRed = colorsTracery.flatten('#orangeAdj.capitalize# #redNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? redOrange : orangeRed);\n            break;\n          case 'Yellow':\n            var orangeYellow = colorsTracery.flatten('#orangeAdj.capitalize# #yellowNoun#');\n            var yellowOrange = colorsTracery.flatten('#yellowAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeYellow : yellowOrange);\n            break;\n          case 'Green':\n            var orangeGreen = colorsTracery.flatten('#orangeAdj.capitalize# #greenNoun#');\n            var greenorange = colorsTracery.flatten('#greenAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeGreen : greenorange);\n            break;\n          case 'Blue':\n            var orangeBlue = colorsTracery.flatten('#orangeAdj.capitalize# #blueNoun#');\n            var blueOrange = colorsTracery.flatten('#blueAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBlue : blueOrange);\n            break;\n          case 'Violet':\n            var orangeViolet = colorsTracery.flatten('#orangeAdj.capitalize# #violetNoun#');\n            var violetOrange = colorsTracery.flatten('#violetAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeViolet : violetOrange);\n            break;\n          case 'Brown':\n            var orangeBrown = colorsTracery.flatten('#orangeAdj.capitalize# #brownNoun#');\n            var brownOrange = colorsTracery.flatten('#brownAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBrown : brownOrange);\n            break;\n          case 'Black':\n            var orangeBlack = colorsTracery.flatten('#orangeAdj.capitalize# #blackNoun#');\n            var blackOrange = colorsTracery.flatten('#blackAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeBlack : blackOrange);\n            break;\n          case 'Grey':\n            var orangeGrey = colorsTracery.flatten('#orangeAdj.capitalize# #greyNoun#');\n            var greyOrange = colorsTracery.flatten('#greyAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangeGrey : greyOrange);\n            break;\n          case 'White':\n            var orangewhite = colorsTracery.flatten('#orangeAdj.capitalize# #whiteNoun#');\n            var whiteOrange = colorsTracery.flatten('#whiteAdj.capitalize# #orangeNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? orangewhite : whiteOrange);\n            break; \n        }\n        break;\n      case 'Yellow':\n        switch (selected) {\n          case 'Red':\n            var yellowRed = colorsTracery.flatten('#yellowAdj.capitalize# #redNoun#');\n            var redYellow = colorsTracery.flatten('#redAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowRed : redYellow);\n            break;\n          case 'Orange':\n            var yellowOrange = colorsTracery.flatten('#yellowAdj.capitalize# #orangeNoun#');\n            var orangeYellow = colorsTracery.flatten('#orangeAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowOrange : orangeYellow);\n            break;\n          case 'Green':\n            var yellowGreen = colorsTracery.flatten('#yellowAdj.capitalize# #greenNoun#');\n            var greenyellow = colorsTracery.flatten('#greenAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGreen : greenyellow);\n            break;\n          case 'Blue':\n            var yellowBlue = colorsTracery.flatten('#yellowAdj.capitalize# #blueNoun#');\n            var blueyellow = colorsTracery.flatten('#blueAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlue : blueyellow);\n            break;\n          case 'Violet':\n            var yellowViolet = colorsTracery.flatten('#yellowAdj.capitalize# #violetNoun#');\n            var violetyellow = colorsTracery.flatten('#violetAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowViolet : violetyellow);\n            break;\n          case 'Brown':\n            var yellowBrown = colorsTracery.flatten('#yellowAdj.capitalize# #brownNoun#');\n            var brownyellow = colorsTracery.flatten('#brownAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBrown : brownyellow);\n            break;\n          case 'Black':\n            var yellowBlack = colorsTracery.flatten('#yellowAdj.capitalize# #blackNoun#');\n            var blackyellow = colorsTracery.flatten('#blackAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlack : blackyellow);\n            break;\n          case 'Grey':\n            var yellowGrey = colorsTracery.flatten('#yellowAdj.capitalize# #greyNoun#');\n            var greyyellow = colorsTracery.flatten('#greyAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGrey : greyyellow);\n            break;\n          case 'White':\n            var yellowwhite = colorsTracery.flatten('#yellowAdj.capitalize# #whiteNoun#');\n            var whiteyellow = colorsTracery.flatten('#whiteAdj.capitalize# #yellowNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowwhite : whiteyellow);\n            break; \n        }\n        break;\n      case 'Green':\n        switch (selected) {\n          case 'Red':\n            var greenRed = colorsTracery.flatten('#greenAdj.capitalize# #redNoun#');\n            var redgreen = colorsTracery.flatten('#redAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenRed : redgreen);\n            break;\n          case 'Orange':\n            var greenOrange = colorsTracery.flatten('#greenAdj.capitalize# #orangeNoun#');\n            var orangegreen = colorsTracery.flatten('#orangeAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenOrange : orangeGreen);\n            break;\n          case 'Yellow':\n            var greenYellow = colorsTracery.flatten('#greenAdj.capitalize# #yellowNoun#');\n            var yellowGreen = colorsTracery.flatten('#yellowAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGreen : greenYellow);\n            break;\n          case 'Blue':\n            var greenBlue = colorsTracery.flatten('#greenAdj.capitalize# #blueNoun#');\n            var blueGreen = colorsTracery.flatten('#blueAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlue : blueGreen);\n            break;\n          case 'Violet':\n            var greenViolet = colorsTracery.flatten('#greenAdj.capitalize# #violetNoun#');\n            var violetGreen = colorsTracery.flatten('#violetAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenViolet : violetGreen);\n            break;\n          case 'Brown':\n            var greenBrown = colorsTracery.flatten('#greenAdj.capitalize# #brownNoun#');\n            var brownGreen = colorsTracery.flatten('#brownAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBrown : brownGreen);\n            break;\n          case 'Black':\n            var greenBlack = colorsTracery.flatten('#greenAdj.capitalize# #blackNoun#');\n            var blackGreen = colorsTracery.flatten('#blackAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlack : blackGreen);\n            break;\n          case 'Grey':\n            var greenGrey = colorsTracery.flatten('#greenAdj.capitalize# #greyNoun#');\n            var greyGreen = colorsTracery.flatten('#greyAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenGrey : greyGreen);\n            break;\n          case 'White':\n            var greenWhite = colorsTracery.flatten('#greenAdj.capitalize# #whiteNoun#');\n            var whiteGreen = colorsTracery.flatten('#whiteAdj.capitalize# #greenNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenWhite : whiteGreen);\n            break; \n        }\n        break;\n      case 'Blue':\n        switch (selected) {\n          case 'Red':\n            var blueRed = colorsTracery.flatten('#blueAdj.capitalize# #redNoun#');\n            var redBlue = colorsTracery.flatten('#redAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueRed : redBlue);\n            break;\n          case 'Orange':\n            var blueOrange = colorsTracery.flatten('#blueAdj.capitalize# #orangeNoun#');\n            var orangeBlue = colorsTracery.flatten('#orangeAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueOrange : orangeBlue);\n            break;\n          case 'Yellow':\n            var blueYellow = colorsTracery.flatten('#blueAdj.capitalize# #yellowNoun#');\n            var yellowBlue = colorsTracery.flatten('#yellowAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlue : blueYellow);\n            break;\n          case 'Green':\n            var blueGreen = colorsTracery.flatten('#blueAdj.capitalize# #greenNoun#');\n            var greenBlue = colorsTracery.flatten('#greenAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlue : blueGreen);\n            break;\n          case 'Violet':\n            var blueViolet = colorsTracery.flatten('#blueAdj.capitalize# #violetNoun#');\n            var violetBlue = colorsTracery.flatten('#violetAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueViolet : violetBlue);\n            break;\n          case 'Brown':\n            var blueBrown = colorsTracery.flatten('#blueAdj.capitalize# #brownNoun#');\n            var brownBlue = colorsTracery.flatten('#brownAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBrown : brownBlue);\n            break;\n          case 'Black':\n            var blueBlack = colorsTracery.flatten('#blueAdj.capitalize# #blackNoun#');\n            var blackBlue = colorsTracery.flatten('#blackAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBlack : blackBlue);\n            break;\n          case 'Grey':\n            var blueGrey = colorsTracery.flatten('#blueAdj.capitalize# #greyNoun#');\n            var greyBlue = colorsTracery.flatten('#greyAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueGrey : greyBlue);\n            break;\n          case 'White':\n            var blueWhite = colorsTracery.flatten('#blueAdj.capitalize# #whiteNoun#');\n            var whiteBlue = colorsTracery.flatten('#whiteAdj.capitalize# #blueNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueWhite : whiteBlue);\n            break; \n        }\n        break;\n      case 'Violet':\n        switch (selected) {\n          case 'Red':\n            var violetRed = colorsTracery.flatten('#violetAdj.capitalize# #redNoun#');\n            var redViolet = colorsTracery.flatten('#redAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetRed : redViolet);\n            break;\n          case 'Orange':\n            var violetOrange = colorsTracery.flatten('#violetAdj.capitalize# #orangeNoun#');\n            var orangeViolet = colorsTracery.flatten('#orangeAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetOrange : orangeViolet);\n            break;\n          case 'Yellow':\n            var violetYellow = colorsTracery.flatten('#violetAdj.capitalize# #yellowNoun#');\n            var yellowViolet = colorsTracery.flatten('#yellowAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowViolet : violetYellow);\n            break;\n          case 'Green':\n            var violetGreen = colorsTracery.flatten('#violetAdj.capitalize# #greenNoun#');\n            var greenViolet = colorsTracery.flatten('#greenAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenViolet : violetGreen);\n            break;\n          case 'Blue':\n            var violetBlue = colorsTracery.flatten('#violetAdj.capitalize# #blueNoun#');\n            var blueViolet = colorsTracery.flatten('#blueAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueViolet : violetBlue);\n            break;\n          case 'Brown':\n            var violetBrown = colorsTracery.flatten('#violetAdj.capitalize# #brownNoun#');\n            var brownViolet = colorsTracery.flatten('#brownAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBrown : brownViolet);\n            break;\n          case 'Black':\n            var violetBlack = colorsTracery.flatten('#violetAdj.capitalize# #blackNoun#');\n            var blackViolet = colorsTracery.flatten('#blackAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBlack : blackViolet);\n            break;\n          case 'Grey':\n            var violetGrey = colorsTracery.flatten('#violetAdj.capitalize# #greyNoun#');\n            var greyViolet = colorsTracery.flatten('#greyAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetGrey : greyViolet);\n            break;\n          case 'White':\n            var violetWhite = colorsTracery.flatten('#violetAdj.capitalize# #whiteNoun#');\n            var whiteViolet = colorsTracery.flatten('#whiteAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetWhite : whiteViolet);\n            break; \n        }\n        break;\n      case 'Brown':\n        switch (selected) {\n          case 'Red':\n            var brownRed = colorsTracery.flatten('#brownAdj.capitalize# #redNoun#');\n            var redbrown = colorsTracery.flatten('#redAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownRed : redbrown);\n            break;\n          case 'Orange':\n            var brownOrange = colorsTracery.flatten('#brownAdj.capitalize# #orangeNoun#');\n            var orangebrown = colorsTracery.flatten('#orangeAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownOrange : orangebrown);\n            break;\n          case 'Yellow':\n            var brownYellow = colorsTracery.flatten('#brownAdj.capitalize# #yellowNoun#');\n            var yellowbrown = colorsTracery.flatten('#yellowAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowbrown : brownYellow);\n            break;\n          case 'Green':\n            var brownGreen = colorsTracery.flatten('#brownAdj.capitalize# #greenNoun#');\n            var greenbrown = colorsTracery.flatten('#greenAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenbrown : brownGreen);\n            break;\n          case 'Blue':\n            var brownBlue = colorsTracery.flatten('#brownAdj.capitalize# #blueNoun#');\n            var bluebrown = colorsTracery.flatten('#blueAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? bluebrown : brownBlue);\n            break;\n          case 'Violet':\n            var violetBrown = colorsTracery.flatten('#violetAdj.capitalize# #brownNoun#');\n            var brownViolet = colorsTracery.flatten('#brownAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBrown : brownViolet);\n            break;\n          case 'Black':\n            var brownBlack = colorsTracery.flatten('#brownAdj.capitalize# #blackNoun#');\n            var blackbrown = colorsTracery.flatten('#blackAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownBlack : blackbrown);\n            break;\n          case 'Grey':\n            var brownGrey = colorsTracery.flatten('#brownAdj.capitalize# #greyNoun#');\n            var greybrown = colorsTracery.flatten('#greyAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownGrey : greybrown);\n            break;\n          case 'White':\n            var brownWhite = colorsTracery.flatten('#brownAdj.capitalize# #whiteNoun#');\n            var whitebrown = colorsTracery.flatten('#whiteAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownWhite : whitebrown);\n            break; \n        }\n        break;\n      case 'Black':\n        switch (selected) {\n          case 'Red':\n            var blackRed = colorsTracery.flatten('#blackAdj.capitalize# #redNoun#');\n            var redBlack = colorsTracery.flatten('#redAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackRed : redBlack);\n            break;\n          case 'Orange':\n            var blackOrange = colorsTracery.flatten('#blackAdj.capitalize# #orangeNoun#');\n            var orangeBlack = colorsTracery.flatten('#orangeAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackOrange : orangeBlack);\n            break;\n          case 'Yellow':\n            var blackYellow = colorsTracery.flatten('#blackAdj.capitalize# #yellowNoun#');\n            var yellowBlack = colorsTracery.flatten('#yellowAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowBlack : blackYellow);\n            break;\n          case 'Green':\n            var blackGreen = colorsTracery.flatten('#blackAdj.capitalize# #greenNoun#');\n            var greenBlack = colorsTracery.flatten('#greenAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenBlack : blackGreen);\n            break;\n          case 'Blue':\n            var blackBlue = colorsTracery.flatten('#blackAdj.capitalize# #blueNoun#');\n            var blueBlack = colorsTracery.flatten('#blueAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueBlack : blackBlue);\n            break;\n          case 'Violet':\n            var violetBlack = colorsTracery.flatten('#violetAdj.capitalize# #blackNoun#');\n            var blackViolet = colorsTracery.flatten('#blackAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetBlack : blackViolet);\n            break;\n          case 'Brown':\n            var brownBlack = colorsTracery.flatten('#brownAdj.capitalize# #blackNoun#');\n            var blackBrown = colorsTracery.flatten('#blackAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownBlack : blackBrown);\n            break;\n          case 'Grey':\n            var blackGrey = colorsTracery.flatten('#blackAdj.capitalize# #greyNoun#');\n            var greyBlack = colorsTracery.flatten('#greyAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackGrey : greyBlack);\n            break;\n          case 'White':\n            var blackWhite = colorsTracery.flatten('#blackAdj.capitalize# #whiteNoun#');\n            var whiteBlack = colorsTracery.flatten('#whiteAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackWhite : whiteBlack);\n            break; \n        }\n        break;\n      case 'Grey':\n        switch (selected) {\n          case 'Red':\n            var greyRed = colorsTracery.flatten('#greyAdj.capitalize# #redNoun#');\n            var redGrey = colorsTracery.flatten('#redAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyRed : redGrey);\n            break;\n          case 'Orange':\n            var greyOrange = colorsTracery.flatten('#greyAdj.capitalize# #orangeNoun#');\n            var orangeGrey = colorsTracery.flatten('#orangeAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyOrange : orangeGrey);\n            break;\n          case 'Yellow':\n            var greyYellow = colorsTracery.flatten('#greyAdj.capitalize# #yellowNoun#');\n            var yellowGrey = colorsTracery.flatten('#yellowAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowGrey : greyYellow);\n            break;\n          case 'Green':\n            var greyGreen = colorsTracery.flatten('#greyAdj.capitalize# #greenNoun#');\n            var greenGrey = colorsTracery.flatten('#greenAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenGrey : greyGreen);\n            break;\n          case 'Blue':\n            var greyBlue = colorsTracery.flatten('#greyAdj.capitalize# #blueNoun#');\n            var blueGrey = colorsTracery.flatten('#blueAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueGrey : greyBlue);\n            break;\n          case 'Violet':\n            var violetGrey = colorsTracery.flatten('#violetAdj.capitalize# #greyNoun#');\n            var greyViolet = colorsTracery.flatten('#greyAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetGrey : greyViolet);\n            break;\n          case 'Brown':\n            var brownGrey = colorsTracery.flatten('#brownAdj.capitalize# #greyNoun#');\n            var greyBrown = colorsTracery.flatten('#greyAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownGrey : greyBrown);\n            break;\n          case 'Black':\n            var blackGrey = colorsTracery.flatten('#blackAdj.capitalize# #greyNoun#');\n            var greyBlack = colorsTracery.flatten('#greyAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackGrey : greyBlack);\n            break;\n          case 'White':\n            var greyWhite = colorsTracery.flatten('#greyAdj.capitalize# #whiteNoun#');\n            var whiteGrey = colorsTracery.flatten('#whiteAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyWhite : whiteGrey);\n            break; \n        }\n        break;\n      case 'White':\n        switch (selected) {\n          case 'Red':\n            var whiteRed = colorsTracery.flatten('#whiteAdj.capitalize# #redNoun#');\n            var redWhite = colorsTracery.flatten('#redAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? whiteRed : redWhite);\n            break;\n          case 'Orange':\n            var whiteOrange = colorsTracery.flatten('#whiteAdj.capitalize# #orangeNoun#');\n            var orangeWhite = colorsTracery.flatten('#orangeAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? whiteOrange : orangeWhite);\n            break;\n          case 'Yellow':\n            var whiteYellow = colorsTracery.flatten('#whiteAdj.capitalize# #yellowNoun#');\n            var yellowWhite = colorsTracery.flatten('#yellowAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? yellowWhite : whiteYellow);\n            break;\n          case 'Green':\n            var whiteGreen = colorsTracery.flatten('#whiteAdj.capitalize# #greenNoun#');\n            var greenWhite = colorsTracery.flatten('#greenAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greenWhite : whiteGreen);\n            break;\n          case 'Blue':\n            var whiteBlue = colorsTracery.flatten('#whiteAdj.capitalize# #blueNoun#');\n            var blueWhite = colorsTracery.flatten('#blueAdj.capitalize# #whiteNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blueWhite : whiteBlue);\n            break;\n          case 'Violet':\n            var violetWhite = colorsTracery.flatten('#violetAdj.capitalize# #whiteNoun#');\n            var whiteViolet = colorsTracery.flatten('#whiteAdj.capitalize# #violetNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? violetWhite : whiteViolet);\n            break;\n          case 'Brown':\n            var brownWhite = colorsTracery.flatten('#brownAdj.capitalize# #whiteNoun#');\n            var whiteBrown = colorsTracery.flatten('#whiteAdj.capitalize# #brownNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? brownWhite : whiteBrown);\n            break;\n          case 'Black':\n            var blackWhite = colorsTracery.flatten('#blackAdj.capitalize# #whiteNoun#');\n            var whiteBlack = colorsTracery.flatten('#whiteAdj.capitalize# #blackNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? blackWhite : whiteBlack);\n            break;\n          case 'Grey':\n            var greyWhite = colorsTracery.flatten('#greyAdj.capitalize# #whiteNoun#');\n            var whiteGrey = colorsTracery.flatten('#whiteAdj.capitalize# #greyNoun#');\n            setPaletteName(Boolean(Math.round(Math.random())) ? greyWhite : whiteGrey);\n            break; \n        }\n        break;          \n    }    \n  }, [colors]);\n\n  const changeNumOfColors = (event) => {\n    setNum(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{padding: 30, backgroundColor: '#d6d6d6'}}>\n        <div className=\"App-header\">\n          Color Palette Generator\n        </div>\n        <TextField\n            id=\"outlined-number\"\n            label=\"Number of Colors\"\n            type=\"number\"\n            InputLabelProps={{\n                shrink: true\n            }}\n            InputProps={{\n              inputProps: {\n                min: 2, \n                max: 8\n              }\n            }}\n            defaultValue={num}\n            onChange={changeNumOfColors}\n            style={{marginRight: 15, minWidth: 125}}\n          />\n        <span style={{paddingTop: 30}}>\n          <Button className=\"Generate-button\" variant=\"contained\" onClick={changeColors}>\n            Generate New Color Palette\n          </Button>\n        </span>    \n      </div>\n      <div className=\"Palette-name\">{paletteName}</div>  \n      <Palette className=\"Palette\" colors={colors}/>\n      <div className='Footer'>\n            Created by Katherine Tuohy\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}